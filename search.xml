<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="2021/06/03/hello-world/"/>
      <url>2021/06/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bash下的转义</title>
      <link href="2020/12/12/bash%E4%B8%8B%E7%9A%84%E8%BD%AC%E4%B9%89/"/>
      <url>2020/12/12/bash%E4%B8%8B%E7%9A%84%E8%BD%AC%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h1 id="bash下的转义"><a href="#bash下的转义" class="headerlink" title="bash下的转义"></a>bash下的转义</h1><p>bash手册如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Quoting:</span><br><span class="line">Quoting is used to remove the special meaning of certain characters or words to the shell.  Quoting can be used to disable special treatment for special characters, to prevent reserved words from being recognized as such, and to prevent parameter expansion.</span><br><span class="line"></span><br><span class="line">       Each of the metacharacters listed above under DEFINITIONS has special meaning to the shell and must be quoted if it is to represent itself.</span><br><span class="line"></span><br><span class="line">       When the command history expansion facilities are being used (see HISTORY EXPANSION below), the history expansion character, usually !,  must  be  quoted  to  prevent  history  expansion.</span><br><span class="line"></span><br><span class="line">       There are three quoting mechanisms: the escape character, single quotes, and double quotes.</span><br><span class="line"></span><br><span class="line">       A  non-quoted backslash (\) is the escape character.  It preserves the literal value of the next character that follows, with the exception of &lt;newline&gt;.  If a \&lt;newline&gt; pair appears, and the backslash is not itself quoted, the \&lt;newline&gt; is treated as a line continuation (that is, it is removed from the input stream and effectively ignored).</span><br><span class="line"></span><br><span class="line">       Enclosing characters in single quotes preserves the literal value of each character within the quotes.  A single quote may not occur between single quotes, even when preceded by a backslash.</span><br><span class="line"></span><br><span class="line">       Enclosing  characters  in double quotes preserves the literal value of all characters within the quotes, with the exception of $, `, \, and, when history expansion is enabled, !.  When the shell is in posix mode, the ! has no special meaning within double quotes, even when history expansion is enabled.  The characters $ and `  retain  their  special meaning  within  double quotes.  The backslash retains its special meaning only when followed by one of the following characters: $, `, &quot;, \, or &lt;newline&gt;.  A double quote may be quoted within double quotes by preceding it with a backslash.  If enabled, history expansion will be performed unless an !  appearing in double quotes is  escaped  using  a  backslash.  The backslash preceding the !  is not removed.</span><br><span class="line"></span><br><span class="line">       The special parameters * and @ have special meaning when in double quotes (see PARAMETERS below).</span><br><span class="line">       </span><br><span class="line">       Words  of  the  form  $&#x27;string&#x27;  are treated specially.  The word expands to string, with backslash-escaped characters replaced as specified by the ANSI C standard.  Backslash escape sequences, if present, are decoded as follows:</span><br><span class="line">              \a     alert (bell)</span><br><span class="line">              \b     backspace</span><br><span class="line">              \e</span><br><span class="line">              \E     an escape character</span><br><span class="line">              \f     form feed</span><br><span class="line">              \n     new line</span><br><span class="line">              \r     carriage return</span><br><span class="line">              \t     horizontal tab</span><br><span class="line">              \v     vertical tab</span><br><span class="line">              \\     backslash</span><br><span class="line">              \&#x27;     single quote</span><br><span class="line">              \&quot;     double quote</span><br><span class="line">              \?     question mark</span><br><span class="line">              \nnn   the eight-bit character whose value is the octal value nnn (one to three digits)</span><br><span class="line">              \xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)</span><br><span class="line">              \uHHHH the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHH (one to four hex digits)</span><br><span class="line">              \UHHHHHHHH</span><br><span class="line">                     the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHHHHHH (one to eight hex digits)</span><br><span class="line">              \cx    a control-x character</span><br><span class="line"></span><br><span class="line">       The expanded result is single-quoted, as if the dollar sign had not been present.</span><br><span class="line"></span><br><span class="line">       A double-quoted string preceded by a dollar sign ($&quot;string&quot;) will cause the string to be translated according to the current locale.  If the current locale is C or POSIX,  the dollar sign is ignored.  If the string is translated and replaced, the replacement is double-quoted.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：使用echo测试时，zsh和bash略有不同。zsh的<code>echo</code>相当于bash的<code>echo -e</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
